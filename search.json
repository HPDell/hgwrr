[{"path":[]},{"path":"/articles/hgwrr.html","id":"model-calibration","dir":"Articles","previous_headings":"Usage","what":"Model calibration","title":"hgwrr","text":"calibrate HGWR model, use function hgwr(). following explanation important parameters.","code":"hgwr(   formula, data, ..., bw = \"CV\",   kernel = c(\"gaussian\", \"bisquared\"),   alpha = 0.01, eps_iter = 1e-6, eps_gradient = 1e-6,   max_iters = 1e6, max_retries = 1e6,   ml_type = c(\"D_Only\", \"D_Beta\"), verbose = 0 )"},{"path":"/articles/hgwrr.html","id":"formula","dir":"Articles","previous_headings":"Usage > Model calibration","what":"formula","title":"hgwrr","text":"parameter specifies model form. Recall three kinds effects GLSW, fixed, SLR effects. specified different parts formula. formula, L() used mark effects GLSW effects, ( | group) used set SLR effects grouping indicator. group-level variables can GLSW effects.","code":"response ~ L(GLSW) + fixed + (SLR | group)"},{"path":"/articles/hgwrr.html","id":"data","dir":"Articles","previous_headings":"Usage > Model calibration","what":"data","title":"hgwrr","text":"sf objects version 0.3-1, parameter supports sf objects. case, arguments ... required. example. data.frame objects data normal data.frame object, extra argument coords required specify coordinates group. Note row order coords needs match group variable. example.","code":"data(wuhan.hp) m_sf <- hgwr(   formula = Price ~ L(d.Water + d.Commercial) + BuildingArea + (Floor.High | group),   data = wuhan.hp,   bw = 299 ) data(multisampling) m_df <- hgwr(   formula = y ~ L(g1 + g2) + x1 + (z1 | group),   data = multisampling$data,   coords = multisampling$coords )"},{"path":"/articles/hgwrr.html","id":"bw-and-kernel","dir":"Articles","previous_headings":"Usage > Model calibration","what":"bw and kernel","title":"hgwrr","text":"Argument bw bandwidth used estimate GLSW effects. can either following options: integer value representing number nearest neighbours. \"CV\" letting algorithm select one. Argument kernel kernel function used estimate GLSW effects. Currently, two choices: \"gaussian\" \"bisquared\".","code":""},{"path":"/articles/hgwrr.html","id":"results","dir":"Articles","previous_headings":"Usage","what":"Results","title":"hgwrr","text":"output returned object hgwr() shows estimates effects. summary() method shows diagnostic information. significance level spatial heterogeneity GLSW effects can tested following codes. methods provided.","code":"m_df #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Fixed Effects #> ------------- #>  Intercept        x1  #>   4.057598  0.966088  #>  #> Group-level Spatially Weighted Effects #> -------------------------------------- #> Bandwidth: 9.000016 (nearest neighbours) #>  #> Coefficient estimates: #>  Coefficient        Min  1st Quartile     Median  3rd Quartile        Max  #>    Intercept  -2.723093     -2.601400  -2.367453     -2.123696  -1.937981  #>           g1   5.557560      6.303393   7.248665      7.500396   8.628861  #>           g2  -0.868120      0.069715   0.958127      1.318092   1.551972  #>  #> Sample-level Random Effects #> --------------------------- #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.920528            #>                   z1  1.920528  0.000000  #>  Residual             1.920528            #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.920528            #>                   z1  1.920528  0.000000  #>  Residual             1.920528            #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16 summary(m_df) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Parameter Estimates #> ------------------- #> Fixed effects: #>             Estimated   Sd. Err      t.val  Pr(>|t|)       #>  Intercept   4.057598  0.254491  15.943958  0.000000  ***  #>         x1   0.966088  0.046763  20.659069  0.000000  ***  #>  #> Bandwidth: 9.000016 (nearest neighbours) #>  #> GLSW effects: #>             Mean Est.  Mean Sd.     ***    **      *      .  #>  Intercept  -2.349187  0.551017  100.0%  0.0%   0.0%   0.0%  #>         g1   6.948511  3.180199    0.0%  6.2%  62.5%  31.2%  #>         g2   0.719551  3.199181    0.0%  0.0%   0.0%   0.0%  #>  #> SLR effects: #>    Groups       Name       Mean  Std.Dev.      Corr  #>     group  Intercept  -0.000000  1.920528            #>                   z1   0.005523  1.920528  0.000000  #>  Residual              0.245697  1.920528            #>    Groups       Name       Mean  Std.Dev.      Corr  #>     group  Intercept  -0.000000  1.920528            #>                   z1   0.005523  1.920528  0.000000  #>  Residual              0.245697  1.920528            #>  #>  #> Diagnostics #> ----------- #>  rsquared  0.641142  #>    logLik       NaN  #>       AIC       NaN  #>  #> Scaled Residuals #> ---------------- #>        Min         1Q    Median        3Q       Max  #>  -5.209189  -0.970662  0.172396  1.493071  5.573239  #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16 summary(m_df, test_hetero = T) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Parameter Estimates #> ------------------- #> Fixed effects: #>             Estimated   Sd. Err      t.val  Pr(>|t|)       #>  Intercept   4.057598  0.254491  15.943958  0.000000  ***  #>         x1   0.966088  0.046763  20.659069  0.000000  ***  #>  #> Bandwidth: 9.000016 (nearest neighbours) #>  #> GLSW effects: #>             Mean Est.  Mean Sd.     ***    **      *      .  #>  Intercept  -2.349187  0.551017  100.0%  0.0%   0.0%   0.0%  #>         g1   6.948511  3.180199    0.0%  6.2%  62.5%  31.2%  #>         g2   0.719551  3.199181    0.0%  0.0%   0.0%   0.0%  #>  #> GLSW effect spatial heterogeneity: #>             Sd. Est.        t0    Min. t    Max. t  Pr(t>t0)       #>  Intercept  0.268012  0.253645  0.031230  0.247266  0.000000  ***  #>         g1  0.854397  0.809485  0.166221  0.805451  0.000000  ***  #>         g2  0.722266  0.691518  0.142386  0.673427  0.000000  ***  #>  #> SLR effects: #>    Groups       Name       Mean  Std.Dev.      Corr  #>     group  Intercept  -0.000000  1.920528            #>                   z1   0.005523  1.920528  0.000000  #>  Residual              0.245697  1.920528            #>    Groups       Name       Mean  Std.Dev.      Corr  #>     group  Intercept  -0.000000  1.920528            #>                   z1   0.005523  1.920528  0.000000  #>  Residual              0.245697  1.920528            #>  #>  #> Diagnostics #> ----------- #>  rsquared  0.641142  #>    logLik       NaN  #>       AIC       NaN  #>  #> Scaled Residuals #> ---------------- #>        Min         1Q    Median        3Q       Max  #>  -5.209189  -0.970662  0.172396  1.493071  5.573239  #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16 head(coef(m_df)) #>   Intercept       g1          g2        x1         z1 #> 1 0.6281359 7.721070  0.06175178 0.9660875 -0.1931416 #> 2 3.1400875 6.335641  1.52880964 0.9660875  0.2870040 #> 3 0.5718733 7.476406  0.84953501 0.9660875  1.2706663 #> 4 2.2477200 7.398369  0.86755062 0.9660875 -0.5998743 #> 5 5.6671685 8.628861 -0.86812008 0.9660875 -1.4658340 #> 6 0.3672157 6.271144  1.35855547 0.9660875  0.6958578 head(fitted(m_df)) #> [1] 2.4122707 2.3422566 3.6628415 0.6408134 3.6927976 2.4090068 head(residuals(m_df)) #> [1] -1.1810742  0.3731876 -1.6647661  3.1263595  0.8010557 -1.6833385"},{"path":[]},{"path":"/articles/hgwrr.html","id":"model-comparison","dir":"Articles","previous_headings":"Further reading","what":"Model comparison","title":"hgwrr","text":"Article HGWR Model Use site compares HGWR GWR HLM simulation data. short paper compares HGWR, GWR, MGWR, HLM simulation data. codes shown site.","code":""},{"path":"/articles/hgwrr.html","id":"mathematical-basis","dir":"Articles","previous_headings":"Further reading","what":"Mathematical basis","title":"hgwrr","text":"following papers shows details mathematical basis HGWR model. Yigong Hu, Richard Harris, Richard Timmerman, Binbin Lu. Hierarchical Geographically Weighted Regression Model Backfitting Maximum Likelihood Estimator (Short Paper). 12th International Conference Geographic Information Science (GIScience 2023). Leibniz International Proceedings Informatics (LIPIcs), Volume 277, pp. 39:1-39:6, Schloss Dagstuhl – Leibniz-Zentrum für Informatik (2023) DOI Hu, Yigong, Lu, Binbin, Ge, Yong, Dong, Guanpeng, 2022. Uncovering spatial heterogeneity real estate prices via combined hierarchical linear model geographically weighted regression. Environment Planning B: Urban Analytics City Science. DOI","code":""},{"path":[]},{"path":"/articles/introduction.html","id":"what-is-hgwr-model","dir":"Articles","previous_headings":"Introduction to HGWR Model","what":"What is HGWR model?","title":"HGWR Model and How to Use It","text":"Hierarchical Geographically Weighted Regression, shorted HGWR, spatial modelling method designed data spatial hierarchical structures. Just name implies, combination Hierarchical Linear Model [HLM, also known Multilevel Model, @Raudenbush-1993] Geographically Weighted Regression [GWR, @BrunsdonFotheringham-1996]. model, spatial effects divided three types: global fixed, local fixed random. Formally, expressed y=Gγ+Xβ+Zμ+ϵ y = G\\gamma + X\\beta + Z\\mu + \\epsilon  yy dependent variable, GG group level independent variables, γ\\gamma local fixed effects, XX also group level independent variables, β\\beta global fixed effects, ZZ individual level independent variables, μ\\mu random effects, ϵ\\epsilon individual errors.","code":""},{"path":"/articles/introduction.html","id":"why-hgwr-model","dir":"Articles","previous_headings":"Introduction to HGWR Model","what":"Why HGWR model?","title":"HGWR Model and How to Use It","text":"know, hierarchical structure commonly existing spatial data. example, cities can grouped provinces higher-level administrative district belong ; house prices may share factors block; students one school different access education resources another school. dealing type data, usually choose HLM address within-group homogeneity -group heterogeneity. usually two types variables: group-level variables sample-level variables. formal ones used describe properties groups (provinces, blocks schools); latter ones observations individual samples (cities, houses students). effect sample-level variables similar groups, thus modelled fixed coefficients (effects). others, modelled individually, .e., random effects. However, group-level variables, can modelled fixed effects. spatial data, encounter problems. According Tobler’s first law Geography “Everything related everything else, near things related distant things” [@Tobler-1970]. model calibrated equally weighted samples, spatial heterogeneity overlooked [@FotheringhamBrunsdon-2002]. Thus, requires us distinguish “local fixed effects” “global fixed effects” discover spatial heterogeneity group-level variables. GWR Multiscale GWR [@FotheringhamYang-2017, LuBrunsdon-2017] dealing data hierarchical structures, GWR problematic [@HuLu-2022]. know GWR calibrate model unique coefficients sample borrowing data neighbours. uses parameter “bandwidth” control many neighbours included. samples hierarchically structured, everything works well. However, just imagine situation like Figure 1. two samples red color blue color, take number neighbours, actually spatial extents . extreme cases, spatial extends samples small hold one two location, large enough. lead failure bandwidth optimization reduce reliability optimized bandwidth. solve problems mentioned , need use HGWR model. able modelling spatial hierarchical structure spatial heterogeneity simultaneously. Examples can show works well spatial hierarchical data.","code":""},{"path":"/articles/introduction.html","id":"modelling-with-hgwr-model","dir":"Articles","previous_headings":"","what":"Modelling with HGWR Model","title":"HGWR Model and How to Use It","text":"R package hgwrr built calibrating HGWR model. section, going show use .","code":""},{"path":"/articles/introduction.html","id":"installation","dir":"Articles","previous_headings":"Modelling with HGWR Model","what":"Installation","title":"HGWR Model and How to Use It","text":"Package hgwrr available CRAN. Simply type following codes install . download latest released source package run following command install package. Note RTools required Windows.","code":"install.packages(\"hgwrr\") R CMD INSTALL hgwrr_0.2-0.tar.gz"},{"path":"/articles/introduction.html","id":"usage","dir":"Articles","previous_headings":"Modelling with HGWR Model","what":"Usage","title":"HGWR Model and How to Use It","text":"going show usage hgwrr package simulated data. First, need load package R session. can calibrate HGWR model via hgwr() function. first five arguments mandatory. formula accepts formula object R. format follows lme4 package. two types effects: fixed effects random effects, use following format specify : data accepts data.frame sf object R. variables specified formula extracted data. (needed data type data.frame) coords accepts matrix 2 columns. row longitude latitude group. bw accepts integer numeric number specify bandwidth used geographically weighted process. Currently can adaptive bandwidth. arguments optional used control backfitting maximum likelihood algorithm. occasions default values fine. default values cause problems want change , please check documentation function hgwr() information.","code":"library(hgwrr) #> Loading required package: sf #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE hgwr(   formula, data, coords, bw,   alpha = 0.01, eps_iter = 1e-06, eps_gradient = 1e-06, max_iters = 1e+06,   max_retries = 10, ml_type = HGWR_ML_TYPE_D_ONLY, verbose = 0 ) dependent ~ L(local.fixed) + fixed + (random | group)"},{"path":"/articles/introduction.html","id":"example-a-small-simulated-data-set","dir":"Articles","previous_headings":"Modelling with HGWR Model","what":"Example: A Small Simulated Data Set","title":"HGWR Model and How to Use It","text":"example used show usage package test whether works. don’t care good fitness model data set. data set “multisampling” provided package, y dependent variable, g1 g2 two group-level variables, z1 x1 two sample-level variables, group labels groups belong , U, V longitude latitude coordinate values groups. regards g1 g2 local fixed effects, x1 global fixed effects z1 random effects. can calibrate HGWR model like output model shows estimations global fixed effects, summary local fixed effects. Also standard deviations random effects correlation coefficients . can look coefficient estimations. ggplot2 packages, can create figures.  can also convert spatial data use tmap visualize.  can also fetch fitted residuals. summary() function give statistical information model. current stage, pseudo R2R^2 available. future, diagnostic information provided package.","code":"data(multisampling) head(multisampling$data) #>           y        g1         g2         z1         x1 group #> 1 1.2311965 0.1706889 -0.2246718  1.4808437  0.7930132     1 #> 2 2.7154442 0.1706889 -0.2246718  0.4890035  0.5222513     1 #> 3 1.9980754 0.1706889 -0.2246718 -0.2261288  1.7462222     1 #> 4 3.7671728 0.1706889 -0.2246718  0.3268472 -1.2713361     1 #> 5 4.4938533 0.1706889 -0.2246718  1.8754945  2.1973895     1 #> 6 0.7256683 0.1706889 -0.2246718 -0.3023764  0.4331308     1 head(multisampling$coords) #>          U        V #> 1 2940.897 2851.943 #> 2 3002.659 3157.717 #> 3 2848.345 2904.326 #> 4 2863.735 2907.999 #> 5 3117.849 2800.236 #> 6 2906.585 2972.770 ms_hgwr <- hgwr(   formula = y ~ L(g1 + g2) + x1 + (z1 | group),   data = multisampling$data,   coords = multisampling$coords,   bw = 10 ) ms_hgwr #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Fixed Effects #> ------------- #>  Intercept        x1  #>   2.844509  0.966059  #>  #> Group-level Spatially Weighted Effects #> -------------------------------------- #> Bandwidth: 10 (nearest neighbours) #>  #> Coefficient estimates: #>  Coefficient        Min  1st Quartile     Median  3rd Quartile        Max  #>    Intercept  -1.430985     -1.350693  -1.140097     -0.911629  -0.727237  #>           g1   5.969397      6.328338   7.136143      7.447083   8.481628  #>           g2  -0.683021      0.043467   0.887209      1.174541   1.521918  #>  #> Sample-level Random Effects #> --------------------------- #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.921255            #>                   z1  1.921255  0.000000  #>  Residual             1.921255            #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.921255            #>                   z1  1.921255  0.000000  #>  Residual             1.921255            #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16 coef(ms_hgwr) #>     Intercept       g1          g2        x1          z1 #> 1  0.63728385 7.718650  0.04654332 0.9660594 -0.19316953 #> 2  3.16626457 6.554636  1.33431862 0.9660594  0.28646830 #> 3  0.59681282 7.420539  0.79849908 0.9660594  1.27063639 #> 4  2.26041067 7.395640  0.86517318 0.9660594 -0.59984180 #> 5  5.72855111 8.481628 -0.68302067 0.9660594 -1.46606958 #> 6  0.35901307 6.235741  1.26283083 0.9660594  0.69526966 #> 7  2.39877444 7.650960 -0.02458224 0.9660594 -1.46161629 #> 8  2.96706662 7.274534 -0.09758977 0.9660594  0.32008996 #> 9  0.80004263 5.969397  0.95359748 0.9660594  0.60679673 #> 10 1.03852566 6.004158  1.52191830 0.9660594 -0.85534304 #> 11 0.88341276 6.997752  1.08577440 0.9660594  0.31273932 #> 12 0.19476251 7.473628  0.04039086 0.9660594 -0.41973900 #> 13 0.08539817 7.308281  0.90924576 0.9660594  1.57629379 #> 14 2.91084212 5.975806  1.10442026 0.9660594  0.01154764 #> 15 1.58219548 6.420936  1.24466256 0.9660594  0.04762966 #> 16 2.05821271 6.734675  0.26179176 0.9660594 -0.04494147 library(ggplot2) ms_hgwr_coef <- as.data.frame(cbind(multisampling$coords, coef(ms_hgwr))) ggplot(ms_hgwr_coef, aes(x = U, y = V)) +   geom_point(aes(color = g1)) +   coord_fixed() + theme_bw() library(sf) library(tmap) #> Breaking News: tmap 3.x is retiring. Please test v4, e.g. with #> remotes::install_github('r-tmap/tmap') ms_hgwr_coef_sf <- st_as_sf(ms_hgwr_coef,                             coords = names(multisampling$coords),                             crs = 27700) tm_shape(ms_hgwr_coef_sf) + tm_dots(col = c(\"g1\", \"g2\"), size = 0.5) #> Variable(s) \"g2\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette. head(data.frame(   real = multisampling$data$y,   fitted = fitted(ms_hgwr),   residuals = residuals(ms_hgwr) )) #>        real    fitted  residuals #> 1 1.2311965 2.4243588 -1.1931623 #> 2 2.7154442 2.3543800  0.3610642 #> 3 1.9980754 3.6749504 -1.6768750 #> 4 3.7671728 0.6529918  3.1141810 #> 5 4.4938533 3.7048352  0.7890181 #> 6 0.7256683 2.4211548 -1.6954865 summary(ms_hgwr) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Parameter Estimates #> ------------------- #> Fixed effects: #>             Estimated   Sd. Err      t.val  Pr(>|t|)       #>  Intercept   2.844509  0.254491  11.177234  0.000000  ***  #>         x1   0.966059  0.046763  20.658467  0.000000  ***  #>  #> Bandwidth: 10 (nearest neighbours) #>  #> GLSW effects: #>             Mean Est.  Mean Sd.   ***    **      *      .  #>  Intercept  -1.115285  0.543705  0.0%  0.0%  56.2%  18.8%  #>         g1   6.976060  3.128518  0.0%  6.2%  68.8%  25.0%  #>         g2   0.663998  3.158385  0.0%  0.0%   0.0%   0.0%  #>  #> SLR effects: #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>  #>  #> Diagnostics #> ----------- #>  rsquared  0.641698  #>    logLik       NaN  #>       AIC       NaN  #>  #> Scaled Residuals #> ---------------- #>        Min         1Q    Median        3Q       Max  #>  -5.222809  -0.982000  0.161400  1.480594  5.562956  #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16"},{"path":"/articles/introduction.html","id":"example-large-scale-simulated-data","dir":"Articles","previous_headings":"Modelling with HGWR Model","what":"Example: Large Scale Simulated Data","title":"HGWR Model and How to Use It","text":"former example, 484 observations 16 groups. adequate enough get precises estimations. , going use large scale simulated data set show performance HGWR model. true value coefficients already known (stored variable msl_beta), closeness estimated true values practical performance metric. data set provided . structure similar data multisampling. data, also regards g1 g2 two group-level variables, z1 x1 two sample-level variables, group labels groups belong , U, V longitude latitude coordinate values groups. calibrate HGWR model. data large (13862 observations), may take time get results.","code":"data(multisampling.large) head(multisampling.large$data) #>          y        g1        g2         x1         z1 group #> 1 2.090256 0.1933745 -0.057836  0.7930132  1.1432041     1 #> 2 3.456452 0.1933745 -0.057836  0.5222513  1.0198745     1 #> 3 2.876627 0.1933745 -0.057836  1.7462222 -0.7071740     1 #> 4 4.510162 0.1933745 -0.057836 -1.2713361  0.8431381     1 #> 5 5.583738 0.1933745 -0.057836  2.1973895 -0.1603318     1 #> 6 1.601511 0.1933745 -0.057836  0.4331308 -0.7634945     1 head(multisampling.large$coords) #>            V1       V2 #> [1,] 2940.897 2851.943 #> [2,] 3002.659 3157.717 #> [3,] 2848.345 2904.326 #> [4,] 2863.735 2907.999 #> [5,] 3117.849 2800.236 #> [6,] 2906.585 2972.770 msl_beta <- multisampling.large$beta head(msl_beta) #>   Intercept        g1        g2          z1 x1 #> 1 0.7114818 11.309720  3.336208 -0.13592452  1 #> 2 1.6523106 12.438025  4.972805 -0.04079697  1 #> 3 1.4783712  6.876733 -5.069080  1.01053901  1 #> 4 3.2734732  6.088872 -3.877653 -0.15826244  1 #> 5 3.8245206 21.341706  3.814638 -2.15663750  1 #> 6 0.4886921  1.243364 -2.469626  0.49864683  1 msl_hgwr <- hgwr(   formula = y ~ L(g1 + g2) + x1 + (z1 | group),   data = multisampling.large$data,   coords = multisampling.large$coords,   bw = 32, kernel = \"bisquared\" ) msl_hgwr #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling.large$data #>  #> Fixed Effects #> ------------- #>  Intercept        x1  #>   1.856041  1.010716  #>  #> Group-level Spatially Weighted Effects #> -------------------------------------- #> Bandwidth: 32 (nearest neighbours) #>  #> Coefficient estimates: #>  Coefficient         Min  1st Quartile     Median  3rd Quartile        Max  #>    Intercept   -0.839777     -0.231721  -0.065754      0.095718   0.622823  #>           g1   -3.110748      0.390257   3.637581      6.433589  12.076704  #>           g2  -10.971950     -2.457583  -0.439274      1.977123   8.306397  #>  #> Sample-level Random Effects #> --------------------------- #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.989349            #>                   z1  1.989349  0.000000  #>  Residual             1.989349            #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.989349            #>                   z1  1.989349  0.000000  #>  Residual             1.989349            #>  #> Other Information #> ----------------- #> Number of Obs: 13862 #>        Groups: group , 200"},{"path":"/articles/introduction.html","id":"fitness-assessment","dir":"Articles","previous_headings":"Modelling with HGWR Model > Example: Large Scale Simulated Data","what":"Fitness Assessment","title":"HGWR Model and How to Use It","text":"check estimations intercept, g1, g2 z1 via scatter plots.  addition scatter plots, root mean squared errors (RMSE) mean absolute errors estimations true values also useful assess fitting performance.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(purrr) coef(msl_hgwr) %>%   select(Intercept, g1, g2, z1) %>%    list(label = names(.), Truth = msl_beta[names(.)], Estimated = .) %>%   pmap_df(data.frame) %>%   mutate(label = factor(label, levels = c(\"Intercept\", \"g1\", \"g2\", \"z1\"))) %>%   ggplot(aes(x = Truth, y = Estimated)) + geom_point() +     coord_fixed() + scale_y_continuous(limits = c(-25, 25)) +     facet_grid(cols = vars(label)) +     theme_bw() msl_hgwr_err <- coef(msl_hgwr) %>%   select(Intercept, g1, g2, z1, x1) %>% {     as.data.frame(rbind(       MAE = map2_dbl(msl_beta, ., ~ mean(abs(.x - .y))),       RMSE = map2_dbl(msl_beta, ., ~ sqrt(mean((.x - .y)^2)))     ))   } msl_hgwr_err #>      Intercept       g1       g2        z1         x1 #> MAE  0.3599828 2.367257 2.266689 0.2025208 0.01071645 #> RMSE 0.4910691 3.644679 2.976845 0.2576828 0.01071645"},{"path":"/articles/introduction.html","id":"comparison-of-hgwr-gwr-and-hlm","dir":"Articles","previous_headings":"Modelling with HGWR Model > Example: Large Scale Simulated Data","what":"Comparison of HGWR, GWR and HLM","title":"HGWR Model and How to Use It","text":"comparison, can also calibrate GWR model HLM model look fitting performance. GWR model can calibrated following codes. also HLM model calibrated following codes. bar plot helpful compare fitness three models.  Note figure limited scale y axis make bar x1 z1 obvious. actual numbers labelled bars. can say HGWR best fitness among three models. able give precise estimations local fixed effects. can estimate global fixed effects also random effects precisely HLM , precisely GWR .","code":"enable_parallel = Sys.info()['sysname'] != 'Darwin' parallel_method = ifelse(enable_parallel, \"omp\", FALSE) parallel_arg = ifelse(enable_parallel, 0, NA) ### GWR model library(GWmodel) #> Loading required package: robustbase #> Loading required package: sp #> Loading required package: Rcpp #> Welcome to GWmodel version 2.4-2. msl_gwr_data <- multisampling.large$data coordinates(msl_gwr_data) <- with(multisampling.large, coords[data$group, ]) ##### Get optimized bandwidth via golden minimization algorithm. msl_gwr_bw <- 265  # The bandiwdth is pre-optimised to save time. ##### Calibrate GWR model with optimized bandwidth. msl_gwr <- gwr.basic(   formula = y ~ g1 + g2 + x1 + z1,   data = msl_gwr_data,   bw = msl_gwr_bw,   adaptive = TRUE,   parallel.method = parallel_method,   parallel.arg = parallel_arg ) #### Get coefficient estimations. #### As samples in one group have equal estimations, #### we use mean value of each group to represent them. msl_gwr_coef <- cbind(msl_gwr$SDF@data, group = msl_gwr_data$group) %>%   select(Intercept, g1, g2, x1, z1, group) %>%   group_by(group) %>%   summarise_all(mean) ##### Calculate RMSE and MAE of estimations. msl_gwr_err <- msl_gwr_coef %>%   select(Intercept, g1, g2, z1, x1) %>% {     as.data.frame(rbind(       MAE = map2_dbl(msl_beta, ., ~ mean(abs(.x - .y))),       RMSE = map2_dbl(msl_beta, ., ~ sqrt(mean((.x - .y)^2)))     ))   } msl_gwr_err #>         Intercept           g1           g2        z1        x1 #> MAE  3.414899e+15 8.396317e+16 1.925287e+17 0.7135892 0.4244955 #> RMSE 4.168939e+16 1.006233e+18 2.338391e+18 2.7673018 2.6585412 library(lme4) #> Loading required package: Matrix msl_hlm <- lmer(   formula = y ~ g1 + g2 + x1 + (z1 | group),   data = multisampling.large$data ) msl_hlm_coef <- coef(msl_hlm)$group colnames(msl_hlm_coef)[which(colnames(msl_hlm_coef) == \"(Intercept)\")] <- \"Intercept\" msl_hlm_err <- msl_hlm_coef %>%   select(Intercept, g1, g2, z1, x1) %>% {     as.data.frame(rbind(       MAE = map2_dbl(msl_beta, ., ~ mean(abs(.x - .y))),       RMSE = map2_dbl(msl_beta, ., ~ sqrt(mean((.x - .y)^2)))     ))   } msl_hlm_err #>      Intercept       g1       g2        z1        x1 #> MAE  0.5403015 3.961721 3.183228 0.2036397 0.0102346 #> RMSE 0.8043435 5.423963 4.610203 0.2584218 0.0102346 list(HGWR = msl_hgwr_err, GWR = msl_gwr_err, HLM = msl_hlm_err) %>%   map2_dfr(., names(.), function(x, nx) {     map2_dfr(x, colnames(x), function(i, ni) {       data.frame(Coefficient = ni, Label = rownames(x), Value = i)     }) %>% cbind(Algorithm = nx, .)   }) %>%   ggplot(aes(x = Coefficient, y = Value, group = Algorithm, fill = Algorithm)) +     geom_col(position = \"dodge\") +     geom_text(aes(label = round(Value, 2), y = pmin(Value, 10), vjust = -0.2),               position = position_dodge(0.9)) +     facet_grid(rows = vars(Label)) +     scale_y_continuous(limits = c(0, 10), oob = scales::squish,                        expand = expansion(add = c(0.5, 1))) +     theme_bw()"},{"path":"/articles/introduction.html","id":"case-study-impact-factors-of-house-price-in-wuhan","dir":"Articles","previous_headings":"Modelling with HGWR Model","what":"Case Study: Impact Factors of House Price in Wuhan","title":"HGWR Model and How to Use It","text":"fitness HGWR demonstrated simulation data, thing applying collected data sets. going use case study show usage HGWR type data. data set provided wuhan.hp package.  data set, collected 2018, 19599 properties located 19599 communities. observation, fields house properties, locational neighbourhood variables. details, distances nearby educational resources (kindergartens, primary schools, middle schools, high schools, universities), commercial areas (business districts, shopping malls supermarkets), transportation facilities (metro stations bus stations), rivers, lakes, green lands. following figure shows distribution properties, table gives information available variables. variable selection process [@HuLu-2022] suggests us use following variables build HGWR model: Fee d.Water d.Commercial d.PrimarySchool d.Kindergarten BuildingArea Floor.High going append variable d.ShoppingMall usually concerned customers researchers. regards locational Fee local fixed effects, BuildingArea global fixed effects Floor.High random effects. can calibrate HGWR model following codes.","code":"data(wuhan.hp) plot(wuhan.hp[\"Price\"]) whhp_hgwr <- hgwr(   formula = Price ~ L(d.Water + d.Commercial + d.Kindergarten + d.PrimarySchool) +             Fee + BuildingArea + d.ShoppingMall + (Floor.High | group),   data = wuhan.hp,   bw = \"CV\" ) whhp_hgwr #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula:  #> Price ~ L(d.Water + d.Commercial + d.Kindergarten + d.PrimarySchool) +   #>     Fee + BuildingArea + d.ShoppingMall + (Floor.High | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: wuhan.hp #>  #> Fixed Effects #> ------------- #>  Intercept       Fee  BuildingArea  d.ShoppingMall  #>   9.905824  0.176803     -0.020361       -0.002869  #>  #> Group-level Spatially Weighted Effects #> -------------------------------------- #> Bandwidth: 562 (nearest neighbours) #>  #> Coefficient estimates: #>      Coefficient        Min  1st Quartile     Median  3rd Quartile        Max  #>        Intercept  -0.255465     -0.217436  -0.196229     -0.160231  -0.136330  #>          d.Water  -2.455754     -2.132142  -1.918264     -1.767405  -1.485196  #>     d.Commercial  -4.637517     -4.456327  -4.275131     -3.973180  -3.840621  #>   d.Kindergarten  -0.035458     -0.031036  -0.027930     -0.025192  -0.021800  #>  d.PrimarySchool  -0.041803     -0.040628  -0.039498     -0.038174  -0.037094  #>  #> Sample-level Random Effects #> --------------------------- #>    Groups        Name  Std.Dev.       Corr  #>     group   Intercept  0.151359             #>            Floor.High  0.079724  -0.022868  #>  Residual              0.081436             #>    Groups        Name  Std.Dev.       Corr  #>     group   Intercept  0.151359             #>            Floor.High  0.079724  -0.022868  #>  Residual              0.081436             #>  #> Other Information #> ----------------- #> Number of Obs: 19599 #>        Groups: group , 776"},{"path":"/articles/introduction.html","id":"coefficient-visualization","dir":"Articles","previous_headings":"Modelling with HGWR Model > Case Study: Impact Factors of House Price in Wuhan","what":"Coefficient Visualization","title":"HGWR Model and How to Use It","text":"can also make maps visualize estimated coefficients. Boundary data Wuhan provided. GeoJSON format can loaded package rgdal. coefficients, can simply combine coordinates houses. coefficients, coordinates groups can one--one matched. visualize coefficients estimations basemap.  figure, can see BuildingArea regarded global fixed effects, samples one estimations. Floor.High regarded random effects, group unique estimation spatial relationship can seen. local fixed effects, estimations seems locally related. suggested first law geography. Besides, spatial heterogeneity also obvious estimations.","code":"wuhan <- sf::read_sf(\"https://raw.githubusercontent.com/hpdell/hgwr/docs/data/wuhan.geojson\") wuhan_hp_groups <- st_centroid(aggregate(wuhan.hp, by = list(wuhan.hp$group), mean)) wuhp_coef_sf <- cbind(coef(whhp_hgwr), st_coordinates(wuhan_hp_groups)) %>%   st_as_sf(coords = c(\"X\", \"Y\"), crs = 4547) wh_basemap <- tm_shape(wuhan) + tm_polygons(col = \"white\") with(whhp_hgwr$effects, c(local.fixed, random, global.fixed, \"Intercept\")) %>%   map(function(var) {     wh_basemap +       tm_shape(wuhp_coef_sf, is.master = T) +       tm_dots(col = var, size = 0.1, midpoint = 0,               palette = \"-RdBu\", legend.col.reverse = T)   }) %>%     tmap_arrange(ncol = 3)"},{"path":"/articles/introduction.html","id":"residual-analysis","dir":"Articles","previous_headings":"Modelling with HGWR Model > Case Study: Impact Factors of House Price in Wuhan","what":"Residual Analysis","title":"HGWR Model and How to Use It","text":"Via standard function residuals(), access residuals estimated model. can visualize combining summary statistics residuals coordinates. example, created map showing mean residual group together standard deviation.  can also convey global Moran test residuals find well estimated points. p-value Moran’s value, can find although suggested reject null hypothesis, global spatial autocorrelation weak take effects. Additionally, local Moran test also useful.  can seen residuals spatially clustered. showing spatial clusters locate near boundary study area.","code":"whhp_hgwr_res <- data.frame(   residuals = residuals(whhp_hgwr),   group = wuhan.hp$group ) %>%   group_by(group) %>%   summarise(res.abs.mean = mean(abs(residuals)),             res.sd = sd(residuals)) %>%   cbind(st_coordinates(wuhan_hp_groups)) %>%   st_as_sf(coords = c(\"X\", \"Y\"), crs = 4547) wh_basemap +   tm_shape(whhp_hgwr_res, is.master = T) +   tm_dots(col = \"res.abs.mean\", size = \"res.sd\", midpoint = 0,           palette = \"-RdBu\", legend.col.reverse = T) library(spdep) #> Loading required package: spData #> To access larger datasets in this package, install the spDataLarge #> package with: `install.packages('spDataLarge', #> repos='https://nowosad.github.io/drat/', type='source')` whhp_hgwr_res_listw <- st_coordinates(whhp_hgwr_res) %>%   knearneigh(k = 20) %>% knn2nb() %>% nb2listw() %>% listw2U() moran.test(whhp_hgwr_res$res.abs.mean, whhp_hgwr_res_listw) #>  #>  Moran I test under randomisation #>  #> data:  whhp_hgwr_res$res.abs.mean   #> weights: whhp_hgwr_res_listw     #>  #> Moran I statistic standard deviate = 6.1948, p-value = 2.918e-10 #> alternative hypothesis: greater #> sample estimates: #> Moran I statistic       Expectation          Variance  #>      0.0639606679     -0.0012903226      0.0001109483 whhp_hgwr_res_localmoran <- localmoran(whhp_hgwr_res$res.abs.mean, whhp_hgwr_res_listw) wh_basemap +   tm_shape(cbind(whhp_hgwr_res, whhp_hgwr_res_localmoran), is.master = T) +   tm_dots(col = \"Ii\", size = 0.2, palette = \"-RdBu\", style = \"quantile\",           midpoint = 0, title = \"Local Moran\") whhp_hgwr_res$res_c <- scale(whhp_hgwr_res$res.abs.mean, scale = F) whhp_hgwr_res$lmoran_c <- scale(whhp_hgwr_res_localmoran[,1], scale = F) whhp_hgwr_res$quadrant <- with(whhp_hgwr_res, {   quadrant <- integer(length(res_c))   quadrant[res_c < 0 & lmoran_c < 0] <- 1   quadrant[res_c < 0 & lmoran_c > 0] <- 2   quadrant[res_c > 0 & lmoran_c < 0] <- 3   quadrant[res_c > 0 & lmoran_c > 0] <- 4   quadrant[whhp_hgwr_res_localmoran[,5] > 0.1] <- 0   as.factor(quadrant) }) LISA_palette <- list(   \"Insignificant\" = \"green\", \"Low-Low\" = \"darkblue\", \"Low-High\" = \"blue\",   \"High-Low\" = \"red\", \"High-High\" = \"darkred\" ) tm_layout(aes.palette = \"cat\") +   wh_basemap +   tm_shape(whhp_hgwr_res, is.master = T) +   tm_dots(col = \"quadrant\", size = 0.2,           palette = as.vector(unlist(LISA_palette)),           labels = names(LISA_palette))"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yigong Hu. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hu Y, Harris R, Timmerman R (2024). hgwrr: Hierarchical Geographically Weighted Regression. R package version 0.5-0, https://hpdell.github.io/hgwrr/, https://github.com/HPDell/hgwrr/.","code":"@Manual{,   title = {hgwrr: Hierarchical and Geographically Weighted Regression},   author = {Yigong Hu and Richard Harris and Richard Timmerman},   year = {2024},   note = {R package version 0.5-0, https://hpdell.github.io/hgwrr/},   url = {https://github.com/HPDell/hgwrr/}, }"},{"path":"/index.html","id":"hgwrr","dir":"","previous_headings":"","what":"Hierarchical and Geographically Weighted Regression","title":"Hierarchical and Geographically Weighted Regression","text":"package provides R interfaces calibrate Hierarchical Geographically Weighted Regression (HGWR) model.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Hierarchical and Geographically Weighted Regression","text":"package now CRAN. want install latest version GitHub, note packages relies submodule hpdell/hgwr. install_github() devtools package probably working. Instead, ’s better recursively clone package.","code":"install.packages(\"hgwrr\") git clone --recursive https://github.com/hpdell/hgwrr R CMD INSTALL hgwrr"},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Hierarchical and Geographically Weighted Regression","text":"quick example showing works. information, please read article. full example.","code":"library(hgwrr) data(multisampling) hgwr(   formula = y ~ L(g1 + g2) + x1 + (z1 | group),   data = multisampling$data,   coords = multisampling$coords,   bw = 10 )"},{"path":"/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Hierarchical and Geographically Weighted Regression","text":"Hu, Yigong, Lu, Binbin, Ge, Yong, Dong, Guanpeng, 2022. Uncovering spatial heterogeneity real estate prices via combined hierarchical linear model geographically weighted regression. Environment Planning B: Urban Analytics City Science. DOI Yigong Hu, Richard Harris, Richard Timmerman, Binbin Lu. Hierarchical Geographically Weighted Regression Model Backfitting Maximum Likelihood Estimator (Short Paper). 12th International Conference Geographic Information Science (GIScience 2023). Leibniz International Proceedings Informatics (LIPIcs), Volume 277, pp. 39:1-39:6, Schloss Dagstuhl – Leibniz-Zentrum für Informatik (2023) DOI","code":""},{"path":"/reference/coef.hgwrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get estimated coefficients. — coef.hgwrm","title":"Get estimated coefficients. — coef.hgwrm","text":"Get estimated coefficients.","code":""},{"path":"/reference/coef.hgwrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get estimated coefficients. — coef.hgwrm","text":"","code":"# S3 method for class 'hgwrm' coef(object, ...)"},{"path":"/reference/coef.hgwrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get estimated coefficients. — coef.hgwrm","text":"object hgwrm object returned hgwr(). ... Parameter received functions.","code":""},{"path":"/reference/coef.hgwrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get estimated coefficients. — coef.hgwrm","text":"DataFrame object consists estimated coefficients.","code":""},{"path":[]},{"path":"/reference/fitted.hgwrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fitted response. — fitted.hgwrm","title":"Get fitted response. — fitted.hgwrm","text":"Get fitted response.","code":""},{"path":"/reference/fitted.hgwrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fitted response. — fitted.hgwrm","text":"","code":"# S3 method for class 'hgwrm' fitted(object, ...)"},{"path":"/reference/fitted.hgwrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fitted response. — fitted.hgwrm","text":"object hgwrm object returned hgwr(). ... Parameter received functions.","code":""},{"path":"/reference/fitted.hgwrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fitted response. — fitted.hgwrm","text":"vector consists fitted response values.","code":""},{"path":[]},{"path":"/reference/hgwr.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical and Geographically Weighted Regression — hgwr","title":"Hierarchical and Geographically Weighted Regression — hgwr","text":"Hierarchical Linear Model (HLM) group-level geographically weighted effects.","code":""},{"path":"/reference/hgwr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical and Geographically Weighted Regression — hgwr","text":"","code":"hgwr(   formula,   data,   ...,   bw = \"CV\",   kernel = c(\"gaussian\", \"bisquared\"),   alpha = 0.01,   eps_iter = 1e-06,   eps_gradient = 1e-06,   max_iters = 1e+06,   max_retries = 1e+06,   ml_type = c(\"D_Only\", \"D_Beta\"),   f_test = FALSE,   verbose = 0 )  # S3 method for class 'sf' hgwr(   formula,   data,   ...,   bw = \"CV\",   kernel = c(\"gaussian\", \"bisquared\"),   alpha = 0.01,   eps_iter = 1e-06,   eps_gradient = 1e-06,   max_iters = 1e+06,   max_retries = 1e+06,   ml_type = c(\"D_Only\", \"D_Beta\"),   f_test = FALSE,   verbose = 0 )  # S3 method for class 'data.frame' hgwr(   formula,   data,   ...,   coords,   bw = \"CV\",   kernel = c(\"gaussian\", \"bisquared\"),   alpha = 0.01,   eps_iter = 1e-06,   eps_gradient = 1e-06,   max_iters = 1e+06,   max_retries = 1e+06,   ml_type = c(\"D_Only\", \"D_Beta\"),   f_test = FALSE,   verbose = 0 )  hgwr_fit(   formula,   data,   coords,   bw = c(\"CV\", \"AIC\"),   kernel = c(\"gaussian\", \"bisquared\"),   alpha = 0.01,   eps_iter = 1e-06,   eps_gradient = 1e-06,   max_iters = 1e+06,   max_retries = 1e+06,   ml_type = c(\"D_Only\", \"D_Beta\"),   f_test = FALSE,   verbose = 0 )"},{"path":"/reference/hgwr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical and Geographically Weighted Regression — hgwr","text":"formula formula. structure similar lmer function lme4 package. Models can specified following form:   information, please see formula subsection details. data data. ... arguments specified type data. bw numeric value. value bandwidth \"CV\". stage function support adaptive bandwidth. unit must number nearest neighbours. \"CV\" specified, algorithm automatically select optimized bandwidth value. kernel character value. specify kernel function used GWR part. Possible values gaussian Gaussian kernel function \\(k(d)=\\exp\\left(-\\frac{d^2}{b^2}\\right)\\) bisquared Bi-squared kernel function. \\(d<b\\) \\(k(d)=\\left(1-\\frac{d^2}{b^2}\\right)^2\\) else \\(k(d)=0\\) alpha numeric value. size first trial step maximum likelihood algorithm. eps_iter numeric value. Terminate threshold back-fitting. eps_gradient numeric value. Terminate threshold maximum likelihood algorithm. max_iters integer value. maximum iteration. max_retries integer value. algorithm tends diverge, stops automatically trying max_retires times. ml_type integer value. Represent maximum likelihood algorithm used. Possible values : D_Only \\(D\\) specified maximum likelihood. D_Beta \\(D\\) \\(beta\\) specified maximum likelihood. f_test logical value. Determine whether F test GLSW effects. f_test=TURE, f_test item returned object showing F test GLSW effect. verbose integer value. Determine log level. Possible values : 0 log printed. 1 logs back-fitting printed. 2 logs printed. coords 2-column matrix. consists coordinates group.","code":"response ~ L(local.fixed) + global.fixed + (random | group)"},{"path":"/reference/hgwr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical and Geographically Weighted Regression — hgwr","text":"list describing model following fields. gamma Coefficients group-level spatially weighted effects. beta Coefficients fixed effects. mu Coefficients sample-level random effects. D Variance-covariance matrix sample-level random effects. sigma Variance errors. effects list including names effects. call Calling function. frame DataFrame object sent call. frame.parsed Variables extracted data. groups Unique group labels extracted data. f_test list F test GLSW effects. exists f_test=TRUE. item contains F value, degrees freedom numerator, degrees freedom denominator, \\(p\\) value \\(F>F_\\alpha\\).","code":""},{"path":[]},{"path":"/reference/hgwr.html","id":"effect-specification-in-formula","dir":"Reference","previous_headings":"","what":"Effect Specification in Formula","title":"Hierarchical and Geographically Weighted Regression — hgwr","text":"HGWR model, three types effects specified formula argument: Group-level spatially weighted (GLSW, aka. local fixed) effects Effects wrapped functional symbol L. Sample-level random (SLR) effects Effects specified outside functional symbol L left symbol |. Fixed effects effects example, following formula example function written   g1 g2 GLSW effects, x1 fixed effects, z1 SLR effects grouped group indicator group. Note SLR effects can specified !","code":"y ~ L(g1 + g2) + x1 + (z1 | group)"},{"path":"/reference/hgwr.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Hierarchical and Geographically Weighted Regression — hgwr","text":"hgwr_fit(): Fit HGWR model","code":""},{"path":"/reference/hgwr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical and Geographically Weighted Regression — hgwr","text":"","code":"data(multisampling) hgwr(formula = y ~ L(g1 + g2) + x1 + (z1 | group),      data = multisampling$data,      coords = multisampling$coords,      bw = 10) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Fixed Effects #> ------------- #>  Intercept        x1  #>   2.844509  0.966059  #>  #> Group-level Spatially Weighted Effects #> -------------------------------------- #> Bandwidth: 10 (nearest neighbours) #>  #> Coefficient estimates: #>  Coefficient        Min  1st Quartile     Median  3rd Quartile        Max  #>    Intercept  -1.430985     -1.350693  -1.140097     -0.911629  -0.727237  #>           g1   5.969397      6.328338   7.136143      7.447083   8.481628  #>           g2  -0.683021      0.043467   0.887209      1.174541   1.521918  #>  #> Sample-level Random Effects #> --------------------------- #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.921255            #>                   z1  1.921255  0.000000  #>  Residual             1.921255            #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.921255            #>                   z1  1.921255  0.000000  #>  Residual             1.921255            #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16  mod_Ftest <-hgwr(  formula = y ~ L(g1 + g2) + x1 + (z1 | group),  data = multisampling$data,  coords = multisampling$coords,  bw = 10 ) summary(mod_Ftest) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Parameter Estimates #> ------------------- #> Fixed effects: #>             Estimated   Sd. Err      t.val  Pr(>|t|)       #>  Intercept   2.844509  0.254491  11.177234  0.000000  ***  #>         x1   0.966059  0.046763  20.658467  0.000000  ***  #>  #> Bandwidth: 10 (nearest neighbours) #>  #> GLSW effects: #>             Mean Est.  Mean Sd.   ***    **      *      .  #>  Intercept  -1.115285  0.543705  0.0%  0.0%  56.2%  18.8%  #>         g1   6.976060  3.128518  0.0%  6.2%  68.8%  25.0%  #>         g2   0.663998  3.158385  0.0%  0.0%   0.0%   0.0%  #>  #> SLR effects: #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>  #>  #> Diagnostics #> ----------- #>  rsquared  0.641698  #>    logLik       NaN  #>       AIC       NaN  #>  #> Scaled Residuals #> ---------------- #>        Min         1Q    Median        3Q       Max  #>  -5.222809  -0.982000  0.161400  1.480594  5.562956  #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16"},{"path":"/reference/hgwrr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"HGWR: Hierarchical and Geographically Weighted Regression — hgwrr-package","title":"HGWR: Hierarchical and Geographically Weighted Regression — hgwrr-package","text":"R C++ implementation Hierarchical Geographically Weighted Regression (HGWR) model provided package. model divides coefficients three types: local fixed effects, global fixed effects, random effects. data spatial hierarchical structures (especially overlapping locations), worth trying model reach better fitness.","code":""},{"path":"/reference/hgwrr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HGWR: Hierarchical and Geographically Weighted Regression — hgwrr-package","text":"package yet installed build time.","code":""},{"path":"/reference/hgwrr-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"HGWR: Hierarchical and Geographically Weighted Regression — hgwrr-package","text":"Acknowledgement: gratefully acknowledge support China Scholarship Council.","code":""},{"path":"/reference/hgwrr-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HGWR: Hierarchical and Geographically Weighted Regression — hgwrr-package","text":"Hu, Y., Lu, B., Ge, Y., Dong, G., 2022. Uncovering spatial heterogeneity real estate prices via combined hierarchical linear model geographically weighted regression. Environment Planning B: Urban Analytics City Science. doi:10.1177/23998083211063885","code":""},{"path":"/reference/hgwrr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"HGWR: Hierarchical and Geographically Weighted Regression — hgwrr-package","text":"Yigong Hu, Richard Harris, Richard Timmerman","code":""},{"path":"/reference/logLik.hgwrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Log likelihood function — logLik.hgwrm","title":"Log likelihood function — logLik.hgwrm","text":"Log likelihood function","code":""},{"path":"/reference/logLik.hgwrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log likelihood function — logLik.hgwrm","text":"","code":"# S3 method for class 'hgwrm' logLik(object, ...)"},{"path":"/reference/logLik.hgwrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log likelihood function — logLik.hgwrm","text":"object hgwrm object. ... Additional arguments.","code":""},{"path":"/reference/logLik.hgwrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log likelihood function — logLik.hgwrm","text":"logLik instance used S3 method logLik().","code":""},{"path":"/reference/make.dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Dummy Variables — make.dummy","title":"Make Dummy Variables — make.dummy","text":"Function make.dummy converts categorical variables data frame dummy variables. Function make.dummy.extract converts column dummy variables necessary assign appropriate names. See \"detail\" section information. Users can define functions allow model deal types variables properly.","code":""},{"path":"/reference/make.dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Dummy Variables — make.dummy","text":"","code":"make.dummy(data)  make.dummy.extract(col, name)  # S3 method for class 'character' make.dummy.extract(col, name)  # S3 method for class 'factor' make.dummy.extract(col, name)  # S3 method for class 'logical' make.dummy.extract(col, name)  # Default S3 method make.dummy.extract(col, name)"},{"path":"/reference/make.dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Dummy Variables — make.dummy","text":"data data frame dummy variables need extracted. col vector extract dummy variables. name vector's name.","code":""},{"path":"/reference/make.dummy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Dummy Variables — make.dummy","text":"data frame extracted dummy variables.","code":""},{"path":"/reference/make.dummy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Dummy Variables — make.dummy","text":"col character vector, function get unique values elements leave last one. , unique values combined name argument names new columns. col factor vector, function get levels leave last one. , level labels combined name argument names new columns. col logical vector, function convert numeric vector value TRUE mapped 1 FALSE 0. col types, default behaviour extracting dummy variables just copy original value try convert numeric values.","code":""},{"path":"/reference/make.dummy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Dummy Variables — make.dummy","text":"","code":"make.dummy(iris[\"Species\"]) #>     Species.setosa Species.versicolor #> 1                1                  0 #> 2                1                  0 #> 3                1                  0 #> 4                1                  0 #> 5                1                  0 #> 6                1                  0 #> 7                1                  0 #> 8                1                  0 #> 9                1                  0 #> 10               1                  0 #> 11               1                  0 #> 12               1                  0 #> 13               1                  0 #> 14               1                  0 #> 15               1                  0 #> 16               1                  0 #> 17               1                  0 #> 18               1                  0 #> 19               1                  0 #> 20               1                  0 #> 21               1                  0 #> 22               1                  0 #> 23               1                  0 #> 24               1                  0 #> 25               1                  0 #> 26               1                  0 #> 27               1                  0 #> 28               1                  0 #> 29               1                  0 #> 30               1                  0 #> 31               1                  0 #> 32               1                  0 #> 33               1                  0 #> 34               1                  0 #> 35               1                  0 #> 36               1                  0 #> 37               1                  0 #> 38               1                  0 #> 39               1                  0 #> 40               1                  0 #> 41               1                  0 #> 42               1                  0 #> 43               1                  0 #> 44               1                  0 #> 45               1                  0 #> 46               1                  0 #> 47               1                  0 #> 48               1                  0 #> 49               1                  0 #> 50               1                  0 #> 51               0                  1 #> 52               0                  1 #> 53               0                  1 #> 54               0                  1 #> 55               0                  1 #> 56               0                  1 #> 57               0                  1 #> 58               0                  1 #> 59               0                  1 #> 60               0                  1 #> 61               0                  1 #> 62               0                  1 #> 63               0                  1 #> 64               0                  1 #> 65               0                  1 #> 66               0                  1 #> 67               0                  1 #> 68               0                  1 #> 69               0                  1 #> 70               0                  1 #> 71               0                  1 #> 72               0                  1 #> 73               0                  1 #> 74               0                  1 #> 75               0                  1 #> 76               0                  1 #> 77               0                  1 #> 78               0                  1 #> 79               0                  1 #> 80               0                  1 #> 81               0                  1 #> 82               0                  1 #> 83               0                  1 #> 84               0                  1 #> 85               0                  1 #> 86               0                  1 #> 87               0                  1 #> 88               0                  1 #> 89               0                  1 #> 90               0                  1 #> 91               0                  1 #> 92               0                  1 #> 93               0                  1 #> 94               0                  1 #> 95               0                  1 #> 96               0                  1 #> 97               0                  1 #> 98               0                  1 #> 99               0                  1 #> 100              0                  1 #> 101              0                  0 #> 102              0                  0 #> 103              0                  0 #> 104              0                  0 #> 105              0                  0 #> 106              0                  0 #> 107              0                  0 #> 108              0                  0 #> 109              0                  0 #> 110              0                  0 #> 111              0                  0 #> 112              0                  0 #> 113              0                  0 #> 114              0                  0 #> 115              0                  0 #> 116              0                  0 #> 117              0                  0 #> 118              0                  0 #> 119              0                  0 #> 120              0                  0 #> 121              0                  0 #> 122              0                  0 #> 123              0                  0 #> 124              0                  0 #> 125              0                  0 #> 126              0                  0 #> 127              0                  0 #> 128              0                  0 #> 129              0                  0 #> 130              0                  0 #> 131              0                  0 #> 132              0                  0 #> 133              0                  0 #> 134              0                  0 #> 135              0                  0 #> 136              0                  0 #> 137              0                  0 #> 138              0                  0 #> 139              0                  0 #> 140              0                  0 #> 141              0                  0 #> 142              0                  0 #> 143              0                  0 #> 144              0                  0 #> 145              0                  0 #> 146              0                  0 #> 147              0                  0 #> 148              0                  0 #> 149              0                  0 #> 150              0                  0  make.dummy.extract(iris$Species, \"Species\") #>     Species.setosa Species.versicolor #> 1                1                  0 #> 2                1                  0 #> 3                1                  0 #> 4                1                  0 #> 5                1                  0 #> 6                1                  0 #> 7                1                  0 #> 8                1                  0 #> 9                1                  0 #> 10               1                  0 #> 11               1                  0 #> 12               1                  0 #> 13               1                  0 #> 14               1                  0 #> 15               1                  0 #> 16               1                  0 #> 17               1                  0 #> 18               1                  0 #> 19               1                  0 #> 20               1                  0 #> 21               1                  0 #> 22               1                  0 #> 23               1                  0 #> 24               1                  0 #> 25               1                  0 #> 26               1                  0 #> 27               1                  0 #> 28               1                  0 #> 29               1                  0 #> 30               1                  0 #> 31               1                  0 #> 32               1                  0 #> 33               1                  0 #> 34               1                  0 #> 35               1                  0 #> 36               1                  0 #> 37               1                  0 #> 38               1                  0 #> 39               1                  0 #> 40               1                  0 #> 41               1                  0 #> 42               1                  0 #> 43               1                  0 #> 44               1                  0 #> 45               1                  0 #> 46               1                  0 #> 47               1                  0 #> 48               1                  0 #> 49               1                  0 #> 50               1                  0 #> 51               0                  1 #> 52               0                  1 #> 53               0                  1 #> 54               0                  1 #> 55               0                  1 #> 56               0                  1 #> 57               0                  1 #> 58               0                  1 #> 59               0                  1 #> 60               0                  1 #> 61               0                  1 #> 62               0                  1 #> 63               0                  1 #> 64               0                  1 #> 65               0                  1 #> 66               0                  1 #> 67               0                  1 #> 68               0                  1 #> 69               0                  1 #> 70               0                  1 #> 71               0                  1 #> 72               0                  1 #> 73               0                  1 #> 74               0                  1 #> 75               0                  1 #> 76               0                  1 #> 77               0                  1 #> 78               0                  1 #> 79               0                  1 #> 80               0                  1 #> 81               0                  1 #> 82               0                  1 #> 83               0                  1 #> 84               0                  1 #> 85               0                  1 #> 86               0                  1 #> 87               0                  1 #> 88               0                  1 #> 89               0                  1 #> 90               0                  1 #> 91               0                  1 #> 92               0                  1 #> 93               0                  1 #> 94               0                  1 #> 95               0                  1 #> 96               0                  1 #> 97               0                  1 #> 98               0                  1 #> 99               0                  1 #> 100              0                  1 #> 101              0                  0 #> 102              0                  0 #> 103              0                  0 #> 104              0                  0 #> 105              0                  0 #> 106              0                  0 #> 107              0                  0 #> 108              0                  0 #> 109              0                  0 #> 110              0                  0 #> 111              0                  0 #> 112              0                  0 #> 113              0                  0 #> 114              0                  0 #> 115              0                  0 #> 116              0                  0 #> 117              0                  0 #> 118              0                  0 #> 119              0                  0 #> 120              0                  0 #> 121              0                  0 #> 122              0                  0 #> 123              0                  0 #> 124              0                  0 #> 125              0                  0 #> 126              0                  0 #> 127              0                  0 #> 128              0                  0 #> 129              0                  0 #> 130              0                  0 #> 131              0                  0 #> 132              0                  0 #> 133              0                  0 #> 134              0                  0 #> 135              0                  0 #> 136              0                  0 #> 137              0                  0 #> 138              0                  0 #> 139              0                  0 #> 140              0                  0 #> 141              0                  0 #> 142              0                  0 #> 143              0                  0 #> 144              0                  0 #> 145              0                  0 #> 146              0                  0 #> 147              0                  0 #> 148              0                  0 #> 149              0                  0 #> 150              0                  0  make.dummy.extract(c(\"top\", \"mid\", \"low\", \"mid\", \"top\"), \"level\") #>   level.top level.mid #> 1         1         0 #> 2         0         1 #> 3         0         0 #> 4         0         1 #> 5         1         0  make.dummy.extract(factor(c(\"far\", \"near\", \"near\")), \"distance\") #>   distance.far #> 1            1 #> 2            0 #> 3            0  make.dummy.extract(c(TRUE, TRUE, FALSE), \"sold\") #>   sold #> 1    1 #> 2    1 #> 3    0"},{"path":"/reference/multisampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Spatial Multisampling Data (DataFrame) — multisampling","title":"Simulated Spatial Multisampling Data (DataFrame) — multisampling","text":"simulation data spatial hierarchical structure samples overlapping certain locations.","code":""},{"path":"/reference/multisampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Spatial Multisampling Data (DataFrame) — multisampling","text":"","code":"data(multisampling)"},{"path":"/reference/multisampling.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Spatial Multisampling Data (DataFrame) — multisampling","text":"list two items called \"data\" \"coord\". Item \"data\" data frame 484 observations 16 locations following 6 variables. y numeric vector, dependent variable \\(y\\) g1 numeric vector, group level independent variable \\(g_1\\) g2 numeric vector, group level independent variable \\(g_2\\) z1 numeric vector, sample level independent variable \\(z_1\\) x1 numeric vector, sample level independent variable \\(x_1\\) group numeric vector, group id sample g1 g2 used estimate local fixed effects; x1 used estimate global fixed effects z1 used estimate random effects.","code":""},{"path":"/reference/multisampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulated Spatial Multisampling Data (DataFrame) — multisampling","text":"Yigong Hu yigong.hu@bristol.ac.uk","code":""},{"path":"/reference/multisampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated Spatial Multisampling Data (DataFrame) — multisampling","text":"","code":"data(multisampling) hgwr(formula = y ~ L(g1 + g2) + x1 + (z1 | group),      data = multisampling$data,      coords = multisampling$coords,      bw = 10) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Fixed Effects #> ------------- #>  Intercept        x1  #>   2.844509  0.966059  #>  #> Group-level Spatially Weighted Effects #> -------------------------------------- #> Bandwidth: 10 (nearest neighbours) #>  #> Coefficient estimates: #>  Coefficient        Min  1st Quartile     Median  3rd Quartile        Max  #>    Intercept  -1.430985     -1.350693  -1.140097     -0.911629  -0.727237  #>           g1   5.969397      6.328338   7.136143      7.447083   8.481628  #>           g2  -0.683021      0.043467   0.887209      1.174541   1.521918  #>  #> Sample-level Random Effects #> --------------------------- #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.921255            #>                   z1  1.921255  0.000000  #>  Residual             1.921255            #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.921255            #>                   z1  1.921255  0.000000  #>  Residual             1.921255            #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16"},{"path":"/reference/multisampling.large.html","id":null,"dir":"Reference","previous_headings":"","what":"Large Scale Simulated Spatial Multisampling Data (DataFrame) — multisampling.large","title":"Large Scale Simulated Spatial Multisampling Data (DataFrame) — multisampling.large","text":"large scale simulation data spatial hierarchical structure samples overlapping certain locations.","code":""},{"path":"/reference/multisampling.large.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Large Scale Simulated Spatial Multisampling Data (DataFrame) — multisampling.large","text":"","code":"data(multisampling)"},{"path":"/reference/multisampling.large.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Large Scale Simulated Spatial Multisampling Data (DataFrame) — multisampling.large","text":"list three items called \"data\", \"coords\" \"beta\". Item \"data\" data frame 13862 observations 200 locations following 6 variables. y numeric vector, dependent variable \\(y\\) g1 numeric vector, group level independent variable \\(g_1\\) g2 numeric vector, group level independent variable \\(g_2\\) z1 numeric vector, sample level independent variable \\(z_1\\) x1 numeric vector, sample level independent variable \\(x_1\\) group numeric vector, group id sample g1 g2 used estimate local fixed effects; x1 used estimate global fixed effects z1 used estimate random effects.","code":""},{"path":"/reference/multisampling.large.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Large Scale Simulated Spatial Multisampling Data (DataFrame) — multisampling.large","text":"Yigong Hu yigong.hu@bristol.ac.uk","code":""},{"path":"/reference/multisampling.large.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Large Scale Simulated Spatial Multisampling Data (DataFrame) — multisampling.large","text":"","code":"if (FALSE) { # \\dontrun{ data(multisampling.large) hgwr(formula = y ~ L(g1 + g2) + x1 + (z1 | group),      data = multisampling.large$data,      coords = multisampling.large$coords,      bw = 32, kernel = \"bisquared\") } # }"},{"path":"/reference/print.hgwrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print description of a hgwrm object. — print.hgwrm","title":"Print description of a hgwrm object. — print.hgwrm","text":"Print description hgwrm object.","code":""},{"path":"/reference/print.hgwrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print description of a hgwrm object. — print.hgwrm","text":"","code":"# S3 method for class 'hgwrm' print(x, decimal.fmt = \"%.6f\", ...)"},{"path":"/reference/print.hgwrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print description of a hgwrm object. — print.hgwrm","text":"x hgwrm object returned hgwr(). decimal.fmt format string passing base::sprintf(). ... Arguments passed print.table.md col.sep Column separator. Default \"\". header.sep Header separator. Default \"-\". header.sep contains one character, repeated column. contains one character, printed first row. row.begin Character beginning row. Default col.sep. row.end Character ending row. Default col.sep. table.Characters printed table. table.Characters printed table. table.style Name pre-defined style. Possible values \"plain\", \"md\", \"latex\", \"booktabs\". Default \"plain\".","code":""},{"path":"/reference/print.hgwrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print description of a hgwrm object. — print.hgwrm","text":"return.","code":""},{"path":[]},{"path":"/reference/print.hgwrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print description of a hgwrm object. — print.hgwrm","text":"","code":"data(multisampling) model <- hgwr(formula = y ~ L(g1 + g2) + x1 + (z1 | group),               data = multisampling$data,               coords = multisampling$coords,               bw = 10) print(model) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Fixed Effects #> ------------- #>  Intercept        x1  #>   2.844509  0.966059  #>  #> Group-level Spatially Weighted Effects #> -------------------------------------- #> Bandwidth: 10 (nearest neighbours) #>  #> Coefficient estimates: #>  Coefficient        Min  1st Quartile     Median  3rd Quartile        Max  #>    Intercept  -1.430985     -1.350693  -1.140097     -0.911629  -0.727237  #>           g1   5.969397      6.328338   7.136143      7.447083   8.481628  #>           g2  -0.683021      0.043467   0.887209      1.174541   1.521918  #>  #> Sample-level Random Effects #> --------------------------- #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.921255            #>                   z1  1.921255  0.000000  #>  Residual             1.921255            #>    Groups       Name  Std.Dev.      Corr  #>     group  Intercept  1.921255            #>                   z1  1.921255  0.000000  #>  Residual             1.921255            #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16 print(model, table.style = \"md\") #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Fixed Effects #> ------------- #>  #> | Intercept |       x1 | #> | --------- | -------- | #> |  2.844509 | 0.966059 | #>  #> Group-level Spatially Weighted Effects #> -------------------------------------- #> Bandwidth: 10 (nearest neighbours) #>  #> Coefficient estimates: #>  #> | Coefficient |       Min | 1st Quartile |    Median | 3rd Quartile |       Max | #> | ----------- | --------- | ------------ | --------- | ------------ | --------- | #> |   Intercept | -1.430985 |    -1.350693 | -1.140097 |    -0.911629 | -0.727237 | #> |          g1 |  5.969397 |     6.328338 |  7.136143 |     7.447083 |  8.481628 | #> |          g2 | -0.683021 |     0.043467 |  0.887209 |     1.174541 |  1.521918 | #>  #> Sample-level Random Effects #> --------------------------- #>  #> |   Groups |      Name | Std.Dev. |     Corr | #> | -------- | --------- | -------- | -------- | #> |    group | Intercept | 1.921255 |          | #> |          |        z1 | 1.921255 | 0.000000 | #> | Residual |           | 1.921255 |          | #>  #> |   Groups |      Name | Std.Dev. |     Corr | #> | -------- | --------- | -------- | -------- | #> |    group | Intercept | 1.921255 |          | #> |          |        z1 | 1.921255 | 0.000000 | #> | Residual |           | 1.921255 |          | #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16"},{"path":"/reference/print.shgt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the result of spatial heterogeneity test — print.shgt","title":"Print the result of spatial heterogeneity test — print.shgt","text":"Print result spatial heterogeneity test","code":""},{"path":"/reference/print.shgt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the result of spatial heterogeneity test — print.shgt","text":"","code":"# S3 method for class 'shgt' print(x, ...)"},{"path":"/reference/print.shgt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the result of spatial heterogeneity test — print.shgt","text":"x shgt object. ... unused arguments.","code":""},{"path":"/reference/print.summary.hgwrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of an hgwrm object. — print.summary.hgwrm","title":"Print summary of an hgwrm object. — print.summary.hgwrm","text":"Print summary hgwrm object.","code":""},{"path":"/reference/print.summary.hgwrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of an hgwrm object. — print.summary.hgwrm","text":"","code":"# S3 method for class 'summary.hgwrm' print(x, decimal.fmt = \"%.6f\", ...)"},{"path":"/reference/print.summary.hgwrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of an hgwrm object. — print.summary.hgwrm","text":"x object returned summary.hgwrm(). decimal.fmt format string passing base::sprintf(). ... Arguments passed print.table.md col.sep Column separator. Default \"\". header.sep Header separator. Default \"-\". header.sep contains one character, repeated column. contains one character, printed first row. row.begin Character beginning row. Default col.sep. row.end Character ending row. Default col.sep. table.Characters printed table. table.Characters printed table. table.style Name pre-defined style. Possible values \"plain\", \"md\", \"latex\", \"booktabs\". Default \"plain\".","code":""},{"path":"/reference/print.summary.hgwrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of an hgwrm object. — print.summary.hgwrm","text":"return.","code":""},{"path":[]},{"path":"/reference/print.summary.hgwrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary of an hgwrm object. — print.summary.hgwrm","text":"","code":"data(multisampling) model <- hgwr(formula = y ~ L(g1 + g2) + x1 + (z1 | group),               data = multisampling$data,               coords = multisampling$coords,               bw = 10) summary(model) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Parameter Estimates #> ------------------- #> Fixed effects: #>             Estimated   Sd. Err      t.val  Pr(>|t|)       #>  Intercept   2.844509  0.254491  11.177234  0.000000  ***  #>         x1   0.966059  0.046763  20.658467  0.000000  ***  #>  #> Bandwidth: 10 (nearest neighbours) #>  #> GLSW effects: #>             Mean Est.  Mean Sd.   ***    **      *      .  #>  Intercept  -1.115285  0.543705  0.0%  0.0%  56.2%  18.8%  #>         g1   6.976060  3.128518  0.0%  6.2%  68.8%  25.0%  #>         g2   0.663998  3.158385  0.0%  0.0%   0.0%   0.0%  #>  #> SLR effects: #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>  #>  #> Diagnostics #> ----------- #>  rsquared  0.641698  #>    logLik       NaN  #>       AIC       NaN  #>  #> Scaled Residuals #> ---------------- #>        Min         1Q    Median        3Q       Max  #>  -5.222809  -0.982000  0.161400  1.480594  5.562956  #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16"},{"path":"/reference/print.table.md.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a character matrix as a table. — print.table.md","title":"Print a character matrix as a table. — print.table.md","text":"Print character matrix table.","code":""},{"path":"/reference/print.table.md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a character matrix as a table. — print.table.md","text":"","code":"# S3 method for class 'table.md' print(   x,   col.sep = \"\",   header.sep = \"\",   row.begin = \"\",   row.end = \"\",   table.before = NA_character_,   table.after = NA_character_,   table.style = c(\"plain\", \"md\", \"latex\", \"booktabs\"),   ... )"},{"path":"/reference/print.table.md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a character matrix as a table. — print.table.md","text":"x character matrix. col.sep Column separator. Default \"\". header.sep Header separator. Default \"-\". header.sep contains one character, repeated column. contains one character, printed first row. row.begin Character beginning row. Default col.sep. row.end Character ending row. Default col.sep. table.Characters printed table. table.Characters printed table. table.style Name pre-defined style. Possible values \"plain\", \"md\", \"latex\", \"booktabs\". Default \"plain\". ... Additional style control arguments.","code":""},{"path":"/reference/print.table.md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a character matrix as a table. — print.table.md","text":"return.","code":""},{"path":"/reference/print.table.md.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a character matrix as a table. — print.table.md","text":"table.style specified, col.sep, header.sep, row.begin row.end take effects. function automatically set values. possible value table.style, corresponding style settings shown following table. function, characters right padded spaces.","code":""},{"path":[]},{"path":"/reference/residuals.hgwrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get residuals. — residuals.hgwrm","title":"Get residuals. — residuals.hgwrm","text":"Get residuals.","code":""},{"path":"/reference/residuals.hgwrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get residuals. — residuals.hgwrm","text":"","code":"# S3 method for class 'hgwrm' residuals(object, ...)"},{"path":"/reference/residuals.hgwrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get residuals. — residuals.hgwrm","text":"object hgwrm object returned hgwr(). ... Parameter received functions.","code":""},{"path":"/reference/residuals.hgwrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get residuals. — residuals.hgwrm","text":"vector consists residuals.","code":""},{"path":[]},{"path":"/reference/spatial_hetero_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the spatial heterogeneity in data based on permutation. — spatial_hetero_test","title":"Test the spatial heterogeneity in data based on permutation. — spatial_hetero_test","text":"Test spatial heterogeneity data based permutation.","code":""},{"path":"/reference/spatial_hetero_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test the spatial heterogeneity in data based on permutation. — spatial_hetero_test","text":"","code":"spatial_hetero_test(   x,   coords,   ...,   resample = 5000,   poly = 2,   bw = 10,   kernel = c(\"bisquared\", \"gaussian\"),   verbose = 0 )"},{"path":"/reference/spatial_hetero_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the spatial heterogeneity in data based on permutation. — spatial_hetero_test","text":"x matrix data tested. column variable. coords matrix coordinates. ... Additional arguments. resample total times resampling replacement. Default 5000. poly number polynomial terms used polynomial estimator. Default 2. bw adaptive bandwidth used polynomial estimator. Default 10. kernel kernel function used polynomial estimator. verbose verbosity level. Default 0.","code":""},{"path":"/reference/spatial_hetero_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the spatial heterogeneity in data based on permutation. — spatial_hetero_test","text":"shgt object permutation-test results following items: vars names variables. t0 value statistics (variance density estimation) original values. t value statistics permuted values. p p-value variable.","code":""},{"path":"/reference/spatial_hetero_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the spatial heterogeneity in data based on permutation. — spatial_hetero_test","text":"","code":"data(multisampling.large) spatial_hetero_test(multisampling.large$beta, multisampling.large$coords) #> Spatial Heterogeneity Test #>  #>                  t0                   t Pr(t>t0)     #> Intercept  0.081540 [0.031470,0.239609] 0.778200     #> g1        29.266000 [1.045108,6.264079] 0.000000 *** #> g2        21.339481 [0.759496,4.698393] 0.000000 *** #> z1         0.110370 [0.034536,0.213022] 0.298600     #> x1         0.000000 [0.000000,0.000000] 0.000000 *** #>  #>  #> Significance levels: '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' #>"},{"path":"/reference/summary.hgwrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary an hgwrm object. — summary.hgwrm","title":"Summary an hgwrm object. — summary.hgwrm","text":"Summary hgwrm object.","code":""},{"path":"/reference/summary.hgwrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary an hgwrm object. — summary.hgwrm","text":"","code":"# S3 method for class 'hgwrm' summary(object, ..., test_hetero = FALSE, verbose = 0)"},{"path":"/reference/summary.hgwrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary an hgwrm object. — summary.hgwrm","text":"object hgwrm object returned hgwr(). ... arguments passed functions. test_hetero Logical/list value. Whether test spatial heterogeneity GLSW effects. set FALSE, test executed. set TRUE, test executed default parameters (see details ). accepts list enable test specified parameters. verbose Integer value control whether additional messages testing spatial heterogeneity reported.","code":""},{"path":"/reference/summary.hgwrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary an hgwrm object. — summary.hgwrm","text":"list containing summary informations hgwrm object following fields. diagnostic list diagnostic information. random.stddev standard deviation random effects. random.corr correlation matrix random effects. residuals residual vector.","code":""},{"path":"/reference/summary.hgwrm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary an hgwrm object. — summary.hgwrm","text":"parameters used perform test spatial heterogeneity bw Bandwidth (unit: number nearest neighbours) used make spatial kernel density estimation. Default: 10. poly number polynomial terms used local polynomial estimation. Default: 2. resample Total resampling times. Default: 5000. kernel kernel function used local polynomial estimation. Options \"gaussian\" \"bisquared\". Default: \"bisquared\".","code":""},{"path":[]},{"path":"/reference/summary.hgwrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary an hgwrm object. — summary.hgwrm","text":"","code":"data(multisampling) m <- hgwr(  formula = y ~ L(g1 + g2) + x1 + (z1 | group),  data = multisampling$data,  coords = multisampling$coords,  bw = 10 ) summary(m) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Parameter Estimates #> ------------------- #> Fixed effects: #>             Estimated   Sd. Err      t.val  Pr(>|t|)       #>  Intercept   2.844509  0.254491  11.177234  0.000000  ***  #>         x1   0.966059  0.046763  20.658467  0.000000  ***  #>  #> Bandwidth: 10 (nearest neighbours) #>  #> GLSW effects: #>             Mean Est.  Mean Sd.   ***    **      *      .  #>  Intercept  -1.115285  0.543705  0.0%  0.0%  56.2%  18.8%  #>         g1   6.976060  3.128518  0.0%  6.2%  68.8%  25.0%  #>         g2   0.663998  3.158385  0.0%  0.0%   0.0%   0.0%  #>  #> SLR effects: #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>  #>  #> Diagnostics #> ----------- #>  rsquared  0.641698  #>    logLik       NaN  #>       AIC       NaN  #>  #> Scaled Residuals #> ---------------- #>        Min         1Q    Median        3Q       Max  #>  -5.222809  -0.982000  0.161400  1.480594  5.562956  #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16 summary(m, test_hetero = TRUE) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Parameter Estimates #> ------------------- #> Fixed effects: #>             Estimated   Sd. Err      t.val  Pr(>|t|)       #>  Intercept   2.844509  0.254491  11.177234  0.000000  ***  #>         x1   0.966059  0.046763  20.658467  0.000000  ***  #>  #> Bandwidth: 10 (nearest neighbours) #>  #> GLSW effects: #>             Mean Est.  Mean Sd.   ***    **      *      .  #>  Intercept  -1.115285  0.543705  0.0%  0.0%  56.2%  18.8%  #>         g1   6.976060  3.128518  0.0%  6.2%  68.8%  25.0%  #>         g2   0.663998  3.158385  0.0%  0.0%   0.0%   0.0%  #>  #> GLSW effect spatial heterogeneity: #>             Sd. Est.        t0    Min. t    Max. t  Pr(t>t0)       #>  Intercept  0.241211  0.230216  0.035692  0.228627  0.000000  ***  #>         g1  0.736901  0.716578  0.109344  0.694086  0.000000  ***  #>         g2  0.645812  0.622871  0.118444  0.606161  0.000000  ***  #>  #> SLR effects: #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>  #>  #> Diagnostics #> ----------- #>  rsquared  0.641698  #>    logLik       NaN  #>       AIC       NaN  #>  #> Scaled Residuals #> ---------------- #>        Min         1Q    Median        3Q       Max  #>  -5.222809  -0.982000  0.161400  1.480594  5.562956  #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16 summary(m, test_hetero = list(kernel = \"gaussian\")) #> Hierarchical and geographically weighted regression model #> ========================================================= #> Formula: y ~ L(g1 + g2) + x1 + (z1 | group) #>  Method: Back-fitting and Maximum likelihood #>    Data: multisampling$data #>  #> Parameter Estimates #> ------------------- #> Fixed effects: #>             Estimated   Sd. Err      t.val  Pr(>|t|)       #>  Intercept   2.844509  0.254491  11.177234  0.000000  ***  #>         x1   0.966059  0.046763  20.658467  0.000000  ***  #>  #> Bandwidth: 10 (nearest neighbours) #>  #> GLSW effects: #>             Mean Est.  Mean Sd.   ***    **      *      .  #>  Intercept  -1.115285  0.543705  0.0%  0.0%  56.2%  18.8%  #>         g1   6.976060  3.128518  0.0%  6.2%  68.8%  25.0%  #>         g2   0.663998  3.158385  0.0%  0.0%   0.0%   0.0%  #>  #> GLSW effect spatial heterogeneity: #>             Sd. Est.        t0    Min. t    Max. t  Pr(t>t0)       #>  Intercept  0.241211  0.239693  0.127825  0.244467  0.002600   **  #>         g1  0.736901  0.732991  0.403952  0.738807  0.001000   **  #>         g2  0.645812  0.644046  0.352540  0.651728  0.000400  ***  #>  #> SLR effects: #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>    Groups       Name      Mean  Std.Dev.      Corr  #>     group  Intercept  0.000000  1.921255            #>                   z1  0.005422  1.921255  0.000000  #>  Residual             0.233641  1.921255            #>  #>  #> Diagnostics #> ----------- #>  rsquared  0.641698  #>    logLik       NaN  #>       AIC       NaN  #>  #> Scaled Residuals #> ---------------- #>        Min         1Q    Median        3Q       Max  #>  -5.222809  -0.982000  0.161400  1.480594  5.562956  #>  #> Other Information #> ----------------- #> Number of Obs: 484 #>        Groups: group , 16"},{"path":"/reference/wuhan.hp.html","id":null,"dir":"Reference","previous_headings":"","what":"Wuhan Second-hand House Price and POI Data (DataFrame) — wuhan.hp","title":"Wuhan Second-hand House Price and POI Data (DataFrame) — wuhan.hp","text":"data set second-hand house price Wuhan, China collected 2018.","code":""},{"path":"/reference/wuhan.hp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wuhan Second-hand House Price and POI Data (DataFrame) — wuhan.hp","text":"","code":"data(multisampling)"},{"path":"/reference/wuhan.hp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wuhan Second-hand House Price and POI Data (DataFrame) — wuhan.hp","text":"list two items called \"data\" \"coords\". Item \"data\" data frame 13862 second-hand properties 779 neighbourhoods following 22 variables. Price House price per square metre. Floor.High 1 property high floor, otherwise 0. Floor.Low 1 property low floor, otherwise 0. Decoration.Fine 1 property well decorated, otherwise 0. PlateTower 1 property plate-tower type, otherwise 0. Steel 1 property 'steel' structure, otherwise 0. BuildingArea Building area square metres. Fee Management fee per square meter per month. d.Commercial Distance nearest commercial area. d.Greenland Distance nearest green land. d.Water Distance nearest river lake. d.University Distance nearest university. d.HighSchool Distance nearest high school. d.MiddleSchool Distance nearest middle school. d.PrimarySchool Distance nearest primary school. d.Kindergarten Distance nearest kindergarten. d.SubwayStation Distance nearest subway station. d.Supermarket Distance nearest supermarket. d.ShoppingMall Distance nearest shopping mall. lon Longitude coordinates (Projected CRS: EPSG 3857). lat Latitude coordinates (Projected CRS: EPSE 3857). group Group id sample. following variables group level: - Fee - d.Commercial - d.Greenland - d.Water - d.University - d.HighSchool - d.MiddleSchool - d.PrimarySchool - d.Kindergarten - d.SubwayStation - d.Supermarket - d.ShoppingMall following variables sample level: - Price - Floor.High - Floor.Low - Decoration.Fine - PlateTower - Steel - BuildingArea Item \"coords\" 779--2 matrix coordinates neighbourhoods.","code":""},{"path":"/reference/wuhan.hp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wuhan Second-hand House Price and POI Data (DataFrame) — wuhan.hp","text":"Yigong Hu yigong.hu@bristol.ac.uk","code":""},{"path":"/reference/wuhan.hp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wuhan Second-hand House Price and POI Data (DataFrame) — wuhan.hp","text":"","code":"if (FALSE) { # \\dontrun{ data(wuhan.hp) hgwr(   formula = Price ~ L(d.Water + d.Commercial + d.PrimarySchool +             d.Kindergarten + Fee) + BuildingArea + (Floor.High | group),   data = wuhan.hp$data,   coords = wuhan.hp$coords, bw = 50, kernel = \"bisquared\") } # }"},{"path":"/news/index.html","id":"version-050","dir":"Changelog","previous_headings":"","what":"Version 0.5.0","title":"Version 0.5.0","text":"Feature: spatial_hetero_test() function testing spatial heterogeneity Feature: show progress bar testing spatial heterogeneity GLSW effects Feature: support Gaussian kernel function testing spatial heterogeneity Improve: efficiency testing spatial heterogeneity Fix: bandwidth optimisation issues Fix: output message summary hgwrm objects","code":""},{"path":"/news/index.html","id":"version-040","dir":"Changelog","previous_headings":"","what":"Version 0.4.0","title":"Version 0.4.0","text":"Feature: support use L() specify local fixed effects Feature: support sf objects Feature: enable set intercept Feature: report diagnostic information Update: wuhan.hp data","code":""},{"path":"/news/index.html","id":"version-030","dir":"Changelog","previous_headings":"","what":"Version 0.3.0","title":"Version 0.3.0","text":"Feature: bandwidth optimisation CV criterion Update: wuhan.hp data Fix: fill parameter cat function","code":""},{"path":"/news/index.html","id":"version-023","dir":"Changelog","previous_headings":"","what":"Version 0.2.3","title":"Version 0.2.3","text":"Feature: new data sets Fix: rename multisampling$coord coords Fix: data document errors Fix: error wuhan.hp data Fix: use group index instead original value Fix: don’t run examples large data set","code":""},{"path":"/news/index.html","id":"version-022","dir":"Changelog","previous_headings":"","what":"Version 0.2.2","title":"Version 0.2.2","text":"Fix: use gsl-config --libs configure script","code":""},{"path":"/news/index.html","id":"version-021","dir":"Changelog","previous_headings":"","what":"Version 0.2.1","title":"Version 0.2.1","text":"Fix: C++ compile errors Fix: first sentence description field Fix: error R function coef.hgwrm Fix: missing .Rd files","code":""},{"path":"/news/index.html","id":"version-020","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"Version 0.2.0","text":"Feature: R interface set kernel Fix: incompatible generic function definitions Fix: R check warnings","code":""},{"path":"/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"Version 0.1.0","title":"Version 0.1.0","text":"Feature: R function hgwr","code":""}]
